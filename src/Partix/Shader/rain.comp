#include "shader.glsl"
SHADER_BEGIN
#include "random.glsl"
#include "math.glsl"
#include "view.glsl"

layout(std140, binding = 1) uniform Emitter
{
    vec3 position;
    vec3 direction;
    int emitCountPerFrame;
    float lifetime;
    float emitVelocity;
    float spriteSize;
    int maxParticleCount;
    vec2 cover;
    float randomTheta;
} emitter;

layout(std140, binding = 1) buffer InputParticles {
    Particle particles[];
} inputParticles;

layout(std140, binding = 2) buffer OutputParticles {
    Particle particles[];
} outputParticles;

layout(binding = 0) uniform atomic_uint emitCount;
layout(local_size_x = 256) in;

void EmitterSpawn_Init(inout Particle particle)
{
    particle.prevAlive = particle.alive;
    if (!particle.alive)
    {
        // Check if we can emit a new particle
        uint count = atomicCounterIncrement(emitCount);
        if (count < emitter.emitCountPerFrame)
        {
            particle.alive = true;
            particle.lifetime = emitter.lifetime + (RandomFloat(particle) - 0.5) * emitter.lifetime * 0.25; // Random lifetime
            particle.position = vec3(emitter.position);
            particle.size = emitter.spriteSize;
        }
    }
    else
    {
        particle.lifetime -= view.deltaTime;
        if (particle.lifetime <= 0.0)
        {
            particle.alive = false;
        }
    }
}

void RandomColor_Init(inout Particle particle)
{
    // Random color initialization
    particle.color = RandomFloat3(particle);
}

#define PI 3.14159265358979323846
void Rain_Init(inout Particle particle)
{
    vec2 pos = (RandomFloat2(particle) - 0.5) * emitter.cover;
    particle.position = emitter.position + vec3(pos.x, 0, pos.y); // Random position in the emitter's cover area
    float theta = (RandomFloat(particle) - 0.5) * 2.0 * emitter.randomTheta / 180.0 * PI;
    float phi = RandomFloat(particle) * 2.0 * PI;
    vec3 canonical_direction = vec3(0.0, 1.0, 0.0);
    if (emitter.direction.xz == vec2(0.0, 0.0))
    {
        canonical_direction = vec3(1.0, 0.0, 0.0);
    }
    vec3 theta_axis = cross(emitter.direction, canonical_direction); // Rotation axis for theta
    vec3 velocity_theta = rotatePerpendicularAxis(emitter.direction, theta_axis, theta); // Rotate the direction vector around the Y axis
    particle.velocity = velocity_theta * emitter.emitVelocity;
}

void RigidBody_Update(inout Particle particle)
{
    // Update the particle's position based on its velocity and lifetime
    particle.position += particle.velocity * view.deltaTime;
}

void AddForce_Update(inout Particle particle)
{
    // Example force: gravity
    vec3 gravity_acceleration = vec3(0.0, -9.81, 0.0); // Gravity force
    particle.velocity += gravity_acceleration * view.deltaTime;
}

void Collision_Update(inout Particle particle)
{
    if (particle.position.y < 0.0)
    {
        particle.alive = false;
    }
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (id < emitter.maxParticleCount)
    {
        Particle particle = inputParticles.particles[id];

        EmitterSpawn_Init(particle);
        if (particle.alive && !particle.prevAlive)
        {
            Rain_Init(particle);
            RandomColor_Init(particle);
        }

        if (particle.alive)
        {
            RigidBody_Update(particle);
            Collision_Update(particle);
        }

        outputParticles.particles[id] = particle;
    }
}