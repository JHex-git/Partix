#include "shader.glsl"
SHADER_BEGIN
#include "particle_common.glsl"
#include "math.glsl"

layout(std140, binding = 0) uniform View
{
    mat4 view_mat;
    mat4 projection_mat;
    float prevTime;
    float currentTime;
    float deltaTime;
} view;

layout(std140, binding = 1) uniform Emitter
{
    vec3 position;
    vec3 direction;
    int emitCountPerFrame;
    float lifetime;
    float emitVelocity;
    float spriteSize;
    int maxParticleCount;
    float jitterAngleRange;
    float theta;
    vec3 color;
} emitter;

layout(std140, binding = 1) buffer InputParticles {
    Particle particles[];
} inputParticles;

layout(std140, binding = 2) buffer OutputParticles {
    Particle particles[];
} outputParticles;

layout(binding = 0) uniform atomic_uint emitCount;
layout(local_size_x = 256) in;

void EmitterSpawn_Init(inout Particle particle)
{
    particle.prevAlive = particle.alive;
    if (!particle.alive)
    {
        // Check if we can emit a new particle
        uint count = atomicCounterIncrement(emitCount);
        if (count < emitter.emitCountPerFrame)
        {
            particle.alive = true;
            particle.lifetime = emitter.lifetime + (RandomFloat(particle) - 0.5) * emitter.lifetime * 0.25; // Random lifetime
            particle.position = vec3(emitter.position); // Random position
            particle.size = emitter.spriteSize;
        }
    }
    else
    {
        particle.lifetime -= view.deltaTime;
        if (particle.lifetime <= 0.0)
        {
            particle.alive = false;
        }
    }
}

#define PI 3.14159265358979323846
void Fountain_Init(inout Particle particle)
{
    vec3 canonical_dir = vec3(1, 0, 0);
    if (emitter.direction.yz == vec2(0, 0)) canonical_dir = vec3(0, 1, 0);
    float phi = RandomFloat(particle) * 2.0 * PI;
    vec3 dir_perpendicular = cross(emitter.direction, canonical_dir);
    dir_perpendicular = rotatePerpendicularAxis(dir_perpendicular, emitter.direction, phi);
    vec3 jitter_axis = cross(emitter.direction, dir_perpendicular);
    float jitter_angle = (RandomFloat(particle) * 2 - 1) * emitter.jitterAngleRange;
    particle.velocity = rotatePerpendicularAxis(emitter.direction, jitter_axis, (jitter_angle + emitter.theta) / 180.0 * PI) * emitter.emitVelocity;
    particle.color = emitter.color;
}

void RigidBody_Update(inout Particle particle)
{
    // Update the particle's position based on its velocity and lifetime
    particle.position += particle.velocity * view.deltaTime;
}

void AddForce_Update(inout Particle particle)
{
    // Example force: gravity
    vec3 gravity_acceleration = vec3(0.0, -9.81, 0.0); // Gravity force
    particle.velocity += gravity_acceleration * view.deltaTime;
}

void Collision_Update(inout Particle particle)
{
    if (particle.position.y < 0.0)
    {
        particle.alive = false;
    }
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (id < emitter.maxParticleCount)
    {
        Particle particle = inputParticles.particles[id];

        EmitterSpawn_Init(particle);
        if (particle.alive && !particle.prevAlive)
        {
            Fountain_Init(particle);
        }

        if (particle.alive)
        {
            RigidBody_Update(particle);
            AddForce_Update(particle);
            Collision_Update(particle);
        }

        outputParticles.particles[id] = particle;
    }
}